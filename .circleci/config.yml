version: 2.1

orbs:
  slack: circleci/slack@4.9.4

commands:  # commands that can be reused as needed in any job
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # get events to check the failer
            aws cloudformation describe-stack-events --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            # destroy the stacks
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end dependencies
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end dependencies
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities,
            # try command again without --audit-level=critical to fix issues with other packages
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "on-fail event -> JOB: scan-backend, has just failed !!!",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udapeople \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt  # just to verify
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment  # rollback on failure

  configure-infrastructure:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8c:ce:93:49:43:3e:24:b0:7d:4f:10:77:9f:c1:05:77"
      - attach_workspace:
          at: ~/  # adds copied ~/.circleci/ansible/inventory.txt to same place (i.e overrites file in repo)
      - run:
          name: check workspace saved files
          command: |
            ls -la
            pwd
            cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install ansible
            # install aws
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install unzip
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure server
          command: |
            # cp ~/inventory.txt project/.circleci/ansible/inventory.txt
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml
      - destroy-environment  # rollback on failure

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
      # - image: cimg/node:18.0.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/  # adds copied ~/.circleci/ansible/inventory.txt to same place (i.e overrites file in repo)
      - run:
          name: install aws
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install unzip
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: add values to .env
          cpmmand: |
            touch backend/.env
            echo "TYPEORM_CONNECTION=postgres" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=./src/migrations" >> backend/.env
            echo "TYPEORM_ENTITIES=./src/modules/domain/*/.entity.ts" >> backend/.env
            echo "TYPEORM_MIGRATIONS=./src/migrations/*.ts" >> backend/.env
            echo "TYPEORM_HOST=udapeople-db.cwadvx79ixnb.us-east-1.rds.amazonaws.com" >> backend/.env
            echo "TYPEORM_PORT=5432 (or the port from RDS if it’s different)" >> backend/.env
            echo "TYPEORM_USERNAME=root" >> backend/.env
            echo "TYPEORM_PASSWORD=testing321" >> backend/.env
            echo "TYPEORM_DATABASE=db0001" >> backend/.env
            cat backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            # # fix vulnerabilities issues
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            # npm audit fix
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            # if there is a match exit quitely
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # output 1 to the key migration_${CIRCLE_WORKFLOW_ID:0:7} if there are migrations
              curl https://kvdb.io/6QF3Cy5gQ9q7Q7DtVXVFxm/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      #     context: RASNIX-SLACK  # using created circleci organization context vars(my slack credentials)
      - deploy-infrastructure:
          # requires: [test-backend, scan-backend, test-frontend, scan-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
