version: 2.1

orbs:
  slack: circleci/slack@4.9.4

commands:  # commands that can be reused as needed in any job
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow-id>>
            # empty and remove frontend S3 bucket
            aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow-id>>


jobs:
  build-frontend:  # === CI - integrate code & build artifact (frontend)
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:  # === CI - integrate code & build artifact (backend)
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:  # === CI - run unit tests (frontend)
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:  # === CI - run unit tests (backend)
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:  # === CI - dependencies vulnerability tests (frontend)
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end dependencies
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit --audit-level=critical

  scan-backend:  # === CI - dependencies vulnerability tests (backend)
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end dependencies
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities,
            # try command again without --audit-level=critical to fix issues with other packages
            npm audit fix --force
            npm audit --audit-level=critical
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "on-fail event -> JOB: scan-backend, has just failed !!!",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

  deploy-infrastructure:  # === CD - provision in AWS (frontend & backend)
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt  # just to verify
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:  # rollback on failure
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:  # === CD - install and configure needed PKGs / dependencies 
    docker:
      - image: circleci/python  # image user=circleci, default working dir=/home/circleci/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8c:ce:93:49:43:3e:24:b0:7d:4f:10:77:9f:c1:05:77"
      - attach_workspace:
          at: ~/  # adds copied ~/.circleci/ansible/inventory.txt to same place (i.e overrites file in repo)
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install ansible
            # install aws
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Configure server with Ansible
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-server.yml
      - destroy-environment:  # rollback on failure
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:  # === CD - 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/  # adds copied ~/.circleci/ansible/inventory.txt to same place (i.e overrites file in repo)
      - run:
          name: install dependencies
          command: |
            sudo apt update
            sudo apt install python3
            sudo apt install awscli  # install dist-package as docker image is old(problematic)
      - run:
          name: create backend .env
          command: |
            touch backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            cat backend/.env  # check vals
      - run:
          # migration has issues as it needs the database to have an extension installed
          # done with this statement { CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; }
          name: Run migrations
          command: |
            cd backend            
            npm install
            npm run migrations >> migrations_dump.txt      
            cat migrations_dump.txt
          no_output_timeout: 30m
      - run:
          name: Send migration results to memstash
          command: |
            # if there is a match exit quitely
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              # output 1 to the key migration_${CIRCLE_WORKFLOW_ID:0:7} if there are migrations
              curl https://kvdb.io/6QF3Cy5gQ9q7Q7DtVXVFxm/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:  # === CD - 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            yum install -y python3 python3-pip
            # script to install Node.js onto Fedora based systems
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum -y install nodejs
      - attach_workspace:  # attaching workspace needs tar (not installed by default)
          at: ~/  # adds copied ~/.circleci/ansible/inventory.txt to same place (i.e overrites file in repo)
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            touch frontend/.env
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:  # rollback on failure
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: circleci/python  # image user=circleci, default working dir=/home/circleci/project
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "8c:ce:93:49:43:3e:24:b0:7d:4f:10:77:9f:c1:05:77"
      - attach_workspace:
          at: ~/  # adds copied ~/.circleci/ansible/inventory.txt to same place (i.e overrites file in repo)
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install nodejs npm
            sudo apt install ansible
            # install aws
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Deploy backend with Ansible
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook deploy-backend.yml
      - destroy-environment:  # rollback on failure
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: circleci/python  # image user=circleci, default working dir=/home/circleci/project
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install tar gzip unzip
            sudo apt install nodejs npm
            sudo apt install ansible
            # install aws
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
                return 1
            else
                return 1
            fi
      # - destroy-environment:  # rollback on failure
      #     workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
          context: RASNIX-SLACK  # using created circleci organization context vars(my slack credentials)
      - deploy-infrastructure:
          requires: [test-backend, scan-backend, test-frontend, scan-frontend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
